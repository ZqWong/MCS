// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;


public static class StringUtils
{
    /// <summary>
    /// 从url获取带有扩展名的文件名
    /// </summary>
    /// <returns>The file name from URL.</returns>
    /// <param name="url">URL.</param>
    public static string GetFileNameFromUrl(string url)
    {
        return url.Substring(url.LastIndexOf('/') + 1, url.Length - url.LastIndexOf('/') - 1);
    }

    /// <summary>
    /// 从url获取文件类型
    /// </summary>
    /// <param name="url"></param>
    /// <returns></returns>
    public static string GetFileTypeFromUrl(string url)
    {
        return Path.GetExtension(url);
    }

    /// <summary>
    /// 将 URI 字符串转换为它的转义表示形式。
    /// </summary>
    /// <param name="url"></param>
    /// <returns></returns>
    public static string EscapeURLStringForWWW(string url)
    {
        var replacedSlashes = url.Replace('\\', '/');
        return Uri.EscapeUriString(replacedSlashes);
    }

    /// <summary>
    /// IsASCII
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static bool IsASCII(this string value)
    {
        return System.Text.Encoding.UTF8.GetByteCount(value) == value.Length;
    }

    /// <summary>
    /// 删除空格
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static string RemoveSpaces(string value)
    {
        return value.Replace(" ", string.Empty);
    }


    public const int DEFAULT_STRING_CUT_LENGTH = 20;
    public const string DEFAULT_STRING_CUT_MARK = "...";
    /// <summary>
    /// 字符串处理如果长度大于maxChars，之后的字符用 cutMark 代替
    /// </summary>
    /// <param name="str"></param>
    /// <param name="maxChars"></param>
    /// <param name="cutMark"></param>
    /// <returns></returns>
    public static string CheckStringLengthAndCut(this string str, int maxChars = DEFAULT_STRING_CUT_LENGTH, string cutMark = DEFAULT_STRING_CUT_MARK)
    {
        return str.Length <= maxChars ? str : str.Substring(0, maxChars) + cutMark;
    }

    public static string GetEnumName<T>(T enumValue)
    {
        return Enum.GetName(typeof(T), enumValue);
    }

    public static TEnum ToEnum<TEnum>(this string strEnumValue, TEnum defaultValue)
    {
        if (!Enum.IsDefined(typeof(TEnum), strEnumValue))
        {
            return defaultValue;
        }

        return (TEnum)Enum.Parse(typeof(TEnum), strEnumValue);
    }

    /// <summary>
    /// 十六进制字符串 转 字节数组
    /// </summary>
    /// <param name="hex"></param>
    /// <returns></returns>
    public static byte[] HexStringToByteArray(string hex)
    {
        int NumberChars = hex.Length;
        byte[] bytes = new byte[NumberChars / 2];
        for (int i = 0; i < NumberChars; i += 2)
        {
            bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
        }
        return bytes;
    }

    /// <summary>
    /// 字节数组 转 十六进制字符串
    /// </summary>
    /// <param name="bytes"></param>
    /// <returns></returns>
    public static string ByteArrayToHexString(byte[] bytes)
    {
        char[] c = new char[bytes.Length * 2];
        int b;
        for (int i = 0; i < bytes.Length; ++i)
        {
            b = bytes[i] >> 4;
            c[i * 2] = (char)(55 + b + (((b - 10) >> 31) & -7));
            b = bytes[i] & 0xF;
            c[i * 2 + 1] = (char)(55 + b + (((b - 10) >> 31) & -7));
        }
        return new string(c);
    }



    /// <summary>
    /// 是否是Email格式
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static bool IsEmailAddress(string value)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(value, @"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$");
    }

    public static bool AreSameSecondLevelDomain(string host1, string host2)
    {
        var host1LastDotPosition = host1.LastIndexOf('.');
        if (host1LastDotPosition <= 0)
        {
            return false;
        }
        var host1PreviousDotPosition = host1.LastIndexOf('.', host1LastDotPosition - 1);
        var host1SecondLevelDomainStart = host1PreviousDotPosition + 1;
        var secondLevelDomain = host1.Substring(host1SecondLevelDomainStart);
        return host2.EndsWith(secondLevelDomain);
    }
}


